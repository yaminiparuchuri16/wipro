

static variable : These are the variables, that which retains values irrespective of type of object. 

static method : These are the methods, that which are to be called by using class name, no object allowed to call these methods. 

Example : Console.WriteLine()
	  Console.ReadLine() 

static class : These classes contains only static methods, to be called by using class name, no non-static methods will be defined in the static class. 
You cannot create an object to static class. 

Extension Methods : If you want to add new methods to the existing class from outside class, then we need the help extension methods. Extension methods needs to be written in static class only. 

assume, we have class as Calculation that contains Sum and Sub methods, 
you want to add Mult and Div from outside, then we need the help of Extension methods. 

create a static class, and in the static class you please follow the syntax as

public static int Mult(this Calculation calc, int a, int b) {
	return a * b;
}

abstract class : A class, that which can be created, but not implemented and instantiated known as abstract class. You cannot create an object to abstract class. Abstract class contains abstract and non-abstract methods, only abstract methods needs to be overrided mandatorily by the derived class. 

abstract class class_name 
{ 
   abstract method1();
   abstract method2();
}  

Will Abstract Class contains constructors or not 

C# does not support the concept of multiple inheritance, to achieve this we need the help of interfaces. An interface contains method declaration, and the implementation can be done in the corresponding class, you can add more than one interface to the particular class. 

An interface contains method declaration, and the implementation can be done in the corresponding class, you can add more than one interface to the particular class. 

difference between interface and abstract class 
________________________________________________

-> An abstract class contains both abstract and non-abstract methods, where interface contains only abstract methods. 

-> Interface methods are public and abstract by default. 

-> Multiple Inheritance can be achieved by using interfaces

-> An interface can be called from anywhere to anywhere. 

interface interface_name {
...
...
}

you can add this interface to the class as

class class_name : interface_name {
...
...
...
}

*** When to use abstract class, when to use interface ***

Abstract class used to represent hierarchical data, where interface can be used for specialization.

Abstract class provides security to the data.


If two interfaces are having same methods, and to be added to a class, you need to implement interfaces by adding interface name as prefix.

Example : 

 internal class Test : IOne, ITwo
 {
     void IOne.Show()
     {
         Console.WriteLine("Show Method from Interface One...");
     }
 }

What is the difference between == and Equals() method. 

== checks the address, where Equals() checks the value 

string s1="Nitin", s2="Yamini";
cw(s1.Equals(s2));
s1==s2;

Employ e1 = new Employ(1,"Raj",1111);
Employ e2 = new Employ(1,"Raj",1111);


cw(e1==e2);
c2(e1.Equals(e2));

____________________________________________________________________

Exception Handling : It is a mechanism of handling the runtime errors during the execution of the program. 

There are 2 types of errors known as

(i) Compile Time

(ii) Runtime 

To handle Exceptions, we have 3 blocks known as

(i) try block : This block contains statement(s) in which there is possibility of getting runtime errors. The statements which are placed in this block are treated as heavy weighted statement(s) as CLR allocates excess memory to them. 

(ii) catch block : Once exception raised in try block, then the control will be forwarded to catch block, this block contains alternate statement(s) for exceptions raised in try block. One try block can contains multiple catch blocks. 

(iii) finally block : This block contains statement(s) that needs to be executed mandatorily irrespective of try and catch blocks, this block is not mandatory, but all the statement(s) which are placed in this block are executed as mandatory statement(s)

Exception is the top most class from which all kinds of Exceptions are derived. 

syntax :
________

try {
...
...
...
} catch (Exception e) {
...
...
} finally {
...
...
...
}






     void ITwo.Show()
     {
         Console.WriteLine("Show Method from Interface Two...");
     }
 }


throw keyword : If you want to raise exceptions based on the condition, then we need the help of throw keyword. 

Write a Program to accept a number, if number < 0 then throw DivideByZeroException, if number = 0 then then IndexOutOfRangeException with proper messages. 

System Exceptions are inadequate to handle in all situations, to overcome this we need the help of custom exception. 

Any class, that which derived from ApplicationException can be treated as Custom Exception. 

You need to write relevant error message for ur exception class. 

public class Exception_class : ApplicationException 
{

}

Now the error message to the thrown from Constructor.

Write a program to check a person is eligible for voting or not, 
else throw user-defined exception VotingException. 


Write a Program to perform calculation of 2 numbers, if any number < 0 then throw NegativeException, if any number = 0 then throw NumberZeroException.

